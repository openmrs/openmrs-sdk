#!/bin/sh
# check for help command

if [ $# -ge 1 ]; then
    case "$1" in
        "-?" | "-h" | "--help" | "-help" | "help" )
            echo
            echo "Usage: omrs-run [options]"
            echo
            echo "Runs an OpenMRS instance of the latest version unless specified otherwise"
            echo

            echo "These options are available:"
                                                                                       
                                                                                        echo "-v [value], --version [value]"
                                                                echo "    Version of OpenMRS. Default is the latest."
                                                                                       

                                                                                        echo "-Pinstall-wizard "
                                                                echo "    Disable automatic install, starts OpenMRS with install wizard."
                                                                                       
            echo
                                        exit;;
                        
    esac
fi

# resolve symbolic links
# courtsey of atlassian sdk scripts
PRG="${0}"

while [ -h "${PRG}" ] ; do
  ls=`ls -ld "${PRG}"`
  link=`expr "${ls}" : '.*-> \(.*\)$'`
  if expr "${link}" : '/.*' > /dev/null; then
    PRG="${link}"
  else
    PRG=`dirname "${PRG}"`/"${link}"
  fi
done

PRGDIR=`dirname "${PRG}"`

# get maven location

SDK_HOME="${PRGDIR}"

SDK_HOME=`dirname "${PRGDIR}"`
export SDK_HOME
SDK_VERSION=1.0.1
export SDK_VERSION
MAVEN_HOME="${SDK_HOME}"/apache-maven
MAVEN_EXEC="${MAVEN_HOME}"/bin

# increase maven allocated memory
export MAVEN_OPTS="-Xmx768M -XX:MaxPermSize=256M"
MVN_PARAMS="-s ${MAVEN_HOME}/conf/settings.xml"

# add maven paramters chosen by user
# courtsey of atlassian sdk scripts
while [ $# -gt 0 ]
do
    case "$1" in
                     "-Pinstall-wizard")
                                                    MVN_PARAMS="${MVN_PARAMS} -Pinstall-wizard"
                    shift 1;;                    
                                     "-v" |  "--version")
                                                    MVN_PARAMS="${MVN_PARAMS} -DopenMRSVersion='${2}'"
                    shift 2;;
                                *)
                        MVN_PARAMS="${MVN_PARAMS} ${1}"
            shift 1;;     esac
done

# check if pom.xml is the proper archetype
if grep -qs "deploy-to-server" pom.xml; then
  echo "Found proper pom.xml"
  # execute maven 
  cd server
  echo "Executing ${MAVEN_EXEC}/mvn jetty:run-war ${MVN_PARAMS}"
  sh -c "${MAVEN_EXEC}/mvn jetty:run-war ${MVN_PARAMS}"
# check if default project exists
elif [ -d "openmrs-project" ]; then
  echo "Found default project directory"
  cd openmrs-project
  # check if pom.xml exists in default directory
  if grep -qs "deploy-to-server" pom.xml; then
    echo "Found proper pom.xml"
    # execute maven
    cd server 
    echo "Executing ${MAVEN_EXEC}/mvn jetty:run-war ${MVN_PARAMS}"
    sh -c "${MAVEN_EXEC}/mvn jetty:run-war ${MVN_PARAMS}"
  else
    echo "Error: pom.xml does not exist."
  fi
else
  while true; do
    read -p "Could not find proper pom.xml, do you want to create a project? (y/n)" yn
    case $yn in
        [Yy]* ) omrs-create-project && cd openmrs-project/server && sh -c "${MAVEN_EXEC}/mvn jetty:run-war ${MVN_PARAMS}"; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done
fi